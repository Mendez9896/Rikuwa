AWSTemplateFormatVersion : '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31


Description: rik-descuento
Resources:
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rik-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: my-lambda-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: decuento-lambda-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:List*
            - dynamodb:DescribeReservedCapacity*
            - dynamodb:DescribeLimits
            - dynamodb:DescribeTimeToLive
            Resource: "*"
          - Effect: Allow
            Action:
            - dynamodb:BatchGet*
            - dynamodb:DescribeStream
            - dynamodb:DescribeTable
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWrite*
            - dynamodb:CreateTable
            - dynamodb:Delete*
            - dynamodb:Update*
            - dynamodb:PutItem
            Resource: arn:aws:dynamodb:*:*:table/fedex
      - PolicyName: decuento-lambda-policy2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:List*
            - dynamodb:DescribeReservedCapacity*
            - dynamodb:DescribeLimits
            - dynamodb:DescribeTimeToLive
            Resource: "*"
          - Effect: Allow
            Action:
            - dynamodb:BatchGet*
            - dynamodb:DescribeStream
            - dynamodb:DescribeTable
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWrite*
            - dynamodb:CreateTable
            - dynamodb:Delete*
            - dynamodb:Update*
            - dynamodb:PutItem
            Resource: arn:aws:dynamodb:*:*:table/api-cache-table
            

  MyAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: rik-descuento-api
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  
  PostLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rik-lambda-desc
      Runtime: python3.6
      CodeUri: ./build
      Handler: rik-descuento-lambda.handler
      Role: !GetAtt MyLambdaRole.Arn
      Events:
        PostUsers:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: /descuento
            Method: GET
            
  SeasonLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rik-season-lambda
      Runtime: python3.6
      CodeUri: ./build
      Handler: rik-season.handler
      Role: !GetAtt MyLambdaRole.Arn
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: /season
            Method: GET

Outputs:
  RoleARN:
    Value: !GetAtt MyLambdaRole.Arn